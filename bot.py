import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from config import BOT_TOKEN
from models import SessionLocal, User, ScheduleSlot, Booking
from sqlalchemy import select, and_
import re
import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import logging
from sqlalchemy import String

ADMIN_IDS = [823862864]  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=str(BOT_TOKEN))

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

@dp.errors()
async def error_handler(update, exception):
    logging.error(f"–û—à–∏–±–∫–∞: {exception} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {update}")
    return True

class BookingStates(StatesGroup):
    entering_name = State()
    choosing_date = State()
    choosing_time = State()
    entering_phone = State()
    confirming = State()

class AdminDeleteStates(StatesGroup):
    choosing_date = State()
    choosing_time = State()
    confirming = State()

class AdminAddSlotStates(StatesGroup):
    choosing_date = State()
    entering_times = State()
    confirming = State()

START_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
    "–≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ—Å–Ω–∏—Ü—ã –∫ –º–∞—Å—Ç–µ—Ä—É –ü—É—à–∫–∞—Ä–µ–≤–æ–π –í–∏–∫—Ç–æ—Ä–∏–∏ –≤ –≥. –ì–ª–∞–∑–æ–≤–µ.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∏–∑—É \"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è\", –∑–∞—Ç–µ–º —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n\n"
    "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º."
)

MAIN_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã")],
    ], resize_keyboard=True
)

ADMIN_MENU_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã")],
        [KeyboardButton(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")],
    ], resize_keyboard=True
)

BACK_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="/start")]],
    resize_keyboard=True
)

def get_dates_keyboard():
    today = datetime.date.today()
    dates = [today + datetime.timedelta(days=i) for i in range(7)]
    row = []
    kb = []
    for i, d in enumerate(dates):
        row.append(KeyboardButton(text=d.strftime('%Y-%m-%d')))
        if (i + 1) % 3 == 0 or i == len(dates) - 1:
            kb.append(row)
            row = []
    kb.append([KeyboardButton(text="/start")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.")
        return
    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id))
        if not user:
            user = User(telegram_id=user_id, phone="", is_admin=user_id in ADMIN_IDS)
            session.add(user)
            await session.commit()
        if user.is_admin:
            await message.answer(START_TEXT, reply_markup=ADMIN_MENU_KB)
        else:
            await message.answer(START_TEXT, reply_markup=MAIN_MENU_KB)
    await state.clear()

@dp.message(lambda m: m.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def ru_book(message: types.Message, state: FSMContext):
    await start_booking(message, state)

@dp.message(lambda m: m.text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def ru_my_bookings(message: types.Message):
    await my_bookings(message)

@dp.message(Command('–ú–æ–∏ –∑–∞–ø–∏—Å–∏'))
async def my_bookings_ru(message: types.Message):
    await my_bookings(message)

@dp.message(lambda m: m.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def ru_admin_panel(message: types.Message):
    await admin_panel(message)

@dp.message(Command('book'))
async def start_booking(message: types.Message, state: FSMContext):
    await state.set_state(BookingStates.entering_name)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(BookingStates.entering_name)
async def enter_name(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã).", reply_markup=BACK_KB)
        return
    await state.update_data(name=message.text.strip())
    await state.set_state(BookingStates.choosing_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_dates_keyboard())

@dp.message(BookingStates.choosing_date)
async def choose_date(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=get_dates_keyboard())
        return
    try:
        date = datetime.datetime.strptime(message.text, '%Y-%m-%d').date()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=get_dates_keyboard())
        return
    await state.update_data(date=date)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    async with SessionLocal() as session:
        slots = await session.scalars(select(ScheduleSlot).where(and_(ScheduleSlot.date == date, ScheduleSlot.is_booked == False)))
        slots = list(slots)
    if not slots:
        await message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.", reply_markup=get_dates_keyboard())
        return
    kb = [[KeyboardButton(text=slot.time) for slot in slots]]
    kb.append([KeyboardButton(text="/start")])
    await state.set_state(BookingStates.choosing_time)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

@dp.message(BookingStates.choosing_time)
async def choose_time(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=BACK_KB)
        return
    data = await state.get_data()
    date = data.get('date')
    time = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–≤–æ–±–æ–¥–µ–Ω
    async with SessionLocal() as session:
        slot = await session.scalar(select(ScheduleSlot).where(and_(ScheduleSlot.date == date, ScheduleSlot.time == time, ScheduleSlot.is_booked == False)))
    if not slot:
        await message.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", reply_markup=BACK_KB)
        return
    await state.update_data(time=time)
    await state.set_state(BookingStates.entering_phone)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)], [KeyboardButton(text="/start")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=kb)

@dp.message(BookingStates.entering_phone, F.contact)
async def enter_phone_contact(message: types.Message, state: FSMContext):
    if not message.contact or not message.contact.phone_number:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.", reply_markup=BACK_KB)
        return
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    data = await state.get_data()
    await state.set_state(BookingStates.confirming)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
             InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
        ]
    )
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {data['name']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=kb)

@dp.message(BookingStates.entering_phone)
async def enter_phone(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=BACK_KB)
        return
    phone = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 89********* –∏–ª–∏ 9*******
    if not re.match(r'^(8|9)\d{9}$', phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89XXXXXXXXX –∏–ª–∏ 9XXXXXXXXX (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ +)", reply_markup=BACK_KB)
        return
    await state.update_data(phone=phone)
    data = await state.get_data()
    await state.set_state(BookingStates.confirming)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
             InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
        ]
    )
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {data['name']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=kb)

@dp.callback_query(lambda c: c.data in ["confirm_yes", "confirm_no"])
async def process_confirm_callback(callback: types.CallbackQuery, state: FSMContext):
    async def safe_edit_or_answer(text):
        try:
            await callback.message.edit_text(text)
        except Exception:
            await callback.message.answer(text)
    if callback.data == "confirm_no":
        await safe_edit_or_answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –≤ –º–µ–Ω—é.")
        await state.clear()
        return
    data = await state.get_data()
    user_id = callback.from_user.id if callback.from_user and callback.from_user.id else None
    if not user_id:
        await safe_edit_or_answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.")
        await state.clear()
        return
    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id))
        if not user:
            user = User(telegram_id=user_id, phone=data['phone'], is_admin=False)
            session.add(user)
            await session.commit()
        else:
            user.phone = data['phone']
            await session.commit()
        slot = await session.scalar(select(ScheduleSlot).where(and_(ScheduleSlot.date == data['date'], ScheduleSlot.time == data['time'], ScheduleSlot.is_booked == False)))
        if not slot:
            await safe_edit_or_answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        slot.is_booked = True
        booking = Booking(user_id=user.id, slot_id=slot.id)
        booking.name = data['name']
        session.add(booking)
        await session.commit()
    await safe_edit_or_answer("–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ.")
    await state.clear()

@dp.message(Command('admin'))
async def admin_panel(message: types.Message):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if user_id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏")],
            [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç")],
            [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
            [types.KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏")],
        ], resize_keyboard=True
    )
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.message(lambda m: m.text == "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏")
async def admin_cleanup_old(message: types.Message):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if user_id not in ADMIN_IDS:
        return
    import datetime
    from models import SessionLocal, Booking, ScheduleSlot
    from sqlalchemy import select
    threshold = datetime.date.today() - datetime.timedelta(days=14)
    async with SessionLocal() as session:
        # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞—Ç–∞ —Å–ª–æ—Ç–∞ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        old_bookings = await session.execute(
            select(Booking).join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
            .where(ScheduleSlot.date < threshold)
        )
        bookings_to_delete = old_bookings.scalars().all()
        for booking in bookings_to_delete:
            await session.delete(booking)
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ 14 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        old_slots = await session.execute(
            select(ScheduleSlot).where(ScheduleSlot.date < threshold)
        )
        slots_to_delete = old_slots.scalars().all()
        for slot in slots_to_delete:
            await session.delete(slot)
        await session.commit()
    await message.answer("–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–ª–æ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—à–ª–æ 14 –¥–Ω–µ–π —Å –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏!")

@dp.message(lambda m: m.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏")
async def admin_view_bookings(message: types.Message):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if user_id not in ADMIN_IDS:
        return
    async with SessionLocal() as session:
        bookings = await session.execute(
            select(Booking, User, ScheduleSlot)
            .join(User, Booking.user_id == User.id)
            .join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
            .order_by(ScheduleSlot.date, ScheduleSlot.time)
        )
        rows = bookings.all()
    if not rows:
        await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    text = ""
    last_date = None
    for booking, user, slot in rows:
        if last_date != slot.date:
            text += f"\n{'*'*20}\n{slot.date.strftime('%Y-%m-%d')}\n{'*'*20}\n"
            last_date = slot.date
        name = getattr(booking, 'name', None) or getattr(user, 'name', None) or '-'
        text += f"ID: {booking.id}\n–ò–º—è: {name}\n–í—Ä–µ–º—è: {slot.time}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n---\n"
    await message.answer(text)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ ---
@dp.message(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç")
async def admin_add_slot(message: types.Message, state: FSMContext):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if user_id not in ADMIN_IDS:
        return
    await state.set_state(AdminAddSlotStates.choosing_date)
    today = datetime.date.today()
    dates = [today + datetime.timedelta(days=i) for i in range(14)]
    row = []
    kb = []
    for i, d in enumerate(dates):
        row.append(KeyboardButton(text=d.strftime('%Y-%m-%d')))
        if (i + 1) % 3 == 0 or i == len(dates) - 1:
            kb.append(row)
            row = []
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

@dp.message(AdminAddSlotStates.choosing_date)
async def admin_add_slot_choose_date(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await cmd_start(message, state)
        return
    try:
        date = datetime.datetime.strptime(message.text, '%Y-%m-%d').date()
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(date=date)
    await state.set_state(AdminAddSlotStates.entering_times)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")]], resize_keyboard=True)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00, 13:30, 18:45):", reply_markup=kb)

@dp.message(AdminAddSlotStates.entering_times)
async def admin_add_slot_enter_times(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AdminAddSlotStates.choosing_date)
        today = datetime.date.today()
        dates = [today + datetime.timedelta(days=i) for i in range(14)]
        row = []
        kb = []
        for i, d in enumerate(dates):
            row.append(KeyboardButton(text=d.strftime('%Y-%m-%d')))
            if (i + 1) % 3 == 0 or i == len(dates) - 1:
                kb.append(row)
                row = []
        kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
        return
    times = [t.strip() for t in message.text.split(",") if t.strip()]
    for t in times:
        if not re.match(r"^\d{2}:\d{2}$", t):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00, 13:30, 18:45")
            return
    await state.update_data(times=times)
    data = await state.get_data()
    date = data.get('date')
    await state.set_state(AdminAddSlotStates.confirming)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")]], resize_keyboard=True)
    await message.answer(f"–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã –Ω–∞ {date}: {', '.join(times)}? (–¥–∞/–Ω–µ—Ç)", reply_markup=kb)

@dp.message(AdminAddSlotStates.confirming)
async def admin_add_slot_confirm(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AdminAddSlotStates.entering_times)
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")]], resize_keyboard=True)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00, 13:30, 18:45):", reply_markup=kb)
        return
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if not message.text or message.text.lower() not in ["–¥–∞", "yes", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]:
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–ª–æ—Ç—ã? –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.")
        await state.set_state(AdminAddSlotStates.choosing_date)
        return
    data = await state.get_data()
    date = data.get('date')
    times = data.get('times')
    added = []
    skipped = []
    async with SessionLocal() as session:
        for time in times:
            exists = await session.scalar(
                select(ScheduleSlot).where(ScheduleSlot.date == date, ScheduleSlot.time == time)
            )
            if exists:
                skipped.append(time)
                continue
            slot = ScheduleSlot(date=date, time=time, is_booked=False)
            session.add(slot)
            added.append(time)
        await session.commit()
    msg = f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ—Ç—ã –Ω–∞ {date}: {', '.join(added) if added else '–Ω–µ—Ç –Ω–æ–≤—ã—Ö'}"
    if skipped:
        msg += f"\n–ü—Ä–æ–ø—É—â–µ–Ω—ã (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {', '.join(skipped)}"
    msg += "\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–ª–æ—Ç—ã? –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é."
    await message.answer(msg)
    await state.set_state(AdminAddSlotStates.choosing_date)

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ (–±–∏—Ä–æ–∫) ---
@dp.message(lambda m: m.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def admin_cancel_booking(message: types.Message, state: FSMContext):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if user_id not in ADMIN_IDS:
        return
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏
    async with SessionLocal() as session:
        bookings = await session.execute(
            select(Booking, ScheduleSlot)
            .join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
            .order_by(ScheduleSlot.date, ScheduleSlot.time)
        )
        rows = bookings.all()
    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    dates = sorted(set(slot.date for _, slot in rows))
    kb = [[KeyboardButton(text=d.strftime('%Y-%m-%d')) for d in dates]]
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")])
    await state.set_state(AdminDeleteStates.choosing_date)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

@dp.message(AdminDeleteStates.choosing_date)
async def admin_delete_choose_date(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await cmd_start(message, state)
        return
    try:
        date = datetime.datetime.strptime(message.text, '%Y-%m-%d').date()
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(date=date)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    async with SessionLocal() as session:
        bookings = await session.execute(
            select(Booking, ScheduleSlot)
            .join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
            .where(ScheduleSlot.date == date)
            .order_by(ScheduleSlot.time)
        )
        rows = bookings.all()
    if not rows:
        await message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        await state.set_state(AdminDeleteStates.choosing_date)
        return
    times = [slot.time for _, slot in rows]
    kb = [[KeyboardButton(text=t) for t in times]]
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")])
    await state.set_state(AdminDeleteStates.choosing_time)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

@dp.message(AdminDeleteStates.choosing_time)
async def admin_delete_choose_time(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AdminDeleteStates.choosing_date)
        user_id = message.from_user.id if message.from_user and message.from_user.id else None
        if user_id not in ADMIN_IDS:
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏
        async with SessionLocal() as session:
            bookings = await session.execute(
                select(Booking, ScheduleSlot)
                .join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
                .order_by(ScheduleSlot.date, ScheduleSlot.time)
            )
            rows = bookings.all()
        if not rows:
            await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
        dates = sorted(set(slot.date for _, slot in rows))
        kb = [[KeyboardButton(text=d.strftime('%Y-%m-%d')) for d in dates]]
        kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
        return
    data = await state.get_data()
    date = data.get('date')
    time = message.text
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    async with SessionLocal() as session:
        booking = await session.scalar(
            select(Booking).join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
            .where(ScheduleSlot.date == date, ScheduleSlot.time == time)
        )
        slot = await session.scalar(
            select(ScheduleSlot).where(ScheduleSlot.date == date, ScheduleSlot.time == time)
        )
    if not booking or not slot:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.set_state(AdminDeleteStates.choosing_date)
        return
    await state.update_data(time=time)
    await state.set_state(AdminDeleteStates.confirming)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")]], resize_keyboard=True)
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ {date} {time}? (–¥–∞/–Ω–µ—Ç)", reply_markup=kb)

@dp.message(AdminDeleteStates.confirming)
async def admin_delete_confirm(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(AdminDeleteStates.choosing_time)
        data = await state.get_data()
        date = data.get('date')
        async with SessionLocal() as session:
            bookings = await session.execute(
                select(Booking, ScheduleSlot)
                .join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
                .where(ScheduleSlot.date == date)
                .order_by(ScheduleSlot.time)
            )
            rows = bookings.all()
        if not rows:
            await message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            await state.set_state(AdminDeleteStates.choosing_date)
            return
        times = [slot.time for _, slot in rows]
        kb = [[KeyboardButton(text=t) for t in times]]
        kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="/start")])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))
        return
    if message.text == "/start":
        await cmd_start(message, state)
        return
    if not message.text or message.text.lower() not in ["–¥–∞", "yes", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"]:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—â—ë? –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.")
        await state.set_state(AdminDeleteStates.choosing_date)
        return
    data = await state.get_data()
    date = data.get('date')
    time = data.get('time')
    async with SessionLocal() as session:
        booking = await session.scalar(
            select(Booking).join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
            .where(ScheduleSlot.date == date, ScheduleSlot.time == time)
        )
        slot = await session.scalar(
            select(ScheduleSlot).where(ScheduleSlot.date == date, ScheduleSlot.time == time)
        )
        if booking:
            await session.delete(booking)
        if slot:
            slot.is_booked = False
        await session.commit()
    await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ {date} {time} —É–¥–∞–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—â—ë? –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    await state.set_state(AdminDeleteStates.choosing_date)

@dp.message(Command('mybookings'))
async def my_bookings(message: types.Message):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.")
        return
    async with SessionLocal() as session:
        bookings = await session.execute(
            select(Booking, ScheduleSlot)
            .join(ScheduleSlot, Booking.slot_id == ScheduleSlot.id)
            .where(Booking.user_id == (await session.scalar(select(User.id).where(User.telegram_id == user_id))))
            .order_by(ScheduleSlot.date, ScheduleSlot.time)
        )
        rows = bookings.all()
    if not rows:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
    for booking, slot in rows:
        text += f"–î–∞—Ç–∞: {slot.date.strftime('%Y-%m-%d')} {slot.time}\n"
    await message.answer(text)

@dp.message(Command('exitadmin'))
async def exit_admin(message: types.Message):
    user_id = message.from_user.id if message.from_user and message.from_user.id else None
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID.")
        return
    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id))
        if user and user.is_admin:
            user.is_admin = False
            await session.commit()
            await message.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –¢–µ–ø–µ—Ä—å –≤—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤—ã —É–∂–µ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")

@dp.message(lambda m: m.text == "/start")
async def to_main_menu(message: types.Message, state: FSMContext):
    await cmd_start(message, state)

@dp.message(lambda m: m.text == "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã")
async def show_free_slots(message: types.Message):
    async with SessionLocal() as session:
        slots = await session.execute(
            select(ScheduleSlot).where(ScheduleSlot.is_booked == False).order_by(ScheduleSlot.date, ScheduleSlot.time)
        )
        slots = slots.scalars().all()
    if not slots:
        await message.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç.")
        return
    text = "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:\n"
    last_date = None
    for slot in slots:
        if last_date != slot.date:
            text += f"\n{'*'*20}\n{slot.date.strftime('%Y-%m-%d')}\n{'*'*20}\n"
            last_date = slot.date
        text += f"–í—Ä–µ–º—è: {slot.time}\n"
    await message.answer(text)

# ... –¥–∞–ª–µ–µ –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏, –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∞–¥–º–∏–Ω–∫–∏ ...

if __name__ == '__main__':
    try:
        asyncio.run(dp.start_polling(bot))
    except Exception as e:
        logging.exception("–ë–æ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è") 